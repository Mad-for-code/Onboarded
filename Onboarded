
Here's a step-by-step guide to creating the GHCPOnboarding project using Java 17 and Spring Boot, with a basic frontend for handling the specified functionalities.

### Step 1: Set Up the Spring Boot Project

1. **Initialize the Project**: You can use Spring Initializr (https://start.spring.io/) to generate the basic structure of your Spring Boot project.
   - Project: Maven
   - Language: Java
   - Spring Boot: 2.7.2
   - Group: com.example
   - Artifact: GHCPOnboarding
   - Dependencies: Spring Web, Spring Data JPA, H2 Database, Spring Boot DevTools

2. **Extract the Project** and open it in IntelliJ IDEA.

### Step 2: Set Up the Backend

#### 2.1 Create the Entity Class

```java
package com.example.ghcponboarding.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import java.time.LocalDateTime;

@Entity
public class Nominee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nomineeName;
    private String nomineePsid;
    private String nomineeEmail;
    private String level3Dept;
    private LocalDateTime timestamp;
    private String accessGranted;

    // Getters and Setters
}
```

#### 2.2 Create the Repository Interface

```java
package com.example.ghcponboarding.repository;

import com.example.ghcponboarding.model.Nominee;
import org.springframework.data.jpa.repository.JpaRepository;

public interface NomineeRepository extends JpaRepository<Nominee, Long> {
}
```

#### 2.3 Create the Service Class

```java
package com.example.ghcponboarding.service;

import com.example.ghcponboarding.model.Nominee;
import com.example.ghcponboarding.repository.NomineeRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class NomineeService {
    @Autowired
    private NomineeRepository nomineeRepository;

    public Nominee saveNominee(Nominee nominee) {
        nominee.setTimestamp(LocalDateTime.now());
        nominee.setAccessGranted("yes");
        return nomineeRepository.save(nominee);
    }

    public List<Nominee> saveAllNominees(List<Nominee> nominees) {
        nominees.forEach(nominee -> {
            nominee.setTimestamp(LocalDateTime.now());
            nominee.setAccessGranted("yes");
        });
        return nomineeRepository.saveAll(nominees);
    }

    public List<Nominee> getAllNominees() {
        return nomineeRepository.findAll();
    }
}
```

#### 2.4 Create the Controller Class

```java
package com.example.ghcponboarding.controller;

import com.example.ghcponboarding.model.Nominee;
import com.example.ghcponboarding.service.NomineeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import com.opencsv.bean.CsvToBeanBuilder;

import java.io.InputStreamReader;
import java.util.List;

@RestController
@RequestMapping("/api/nominees")
public class NomineeController {
    @Autowired
    private NomineeService nomineeService;

    @PostMapping("/upload")
    public List<Nominee> uploadCsv(@RequestParam("file") MultipartFile file) throws Exception {
        List<Nominee> nominees = new CsvToBeanBuilder<Nominee>(new InputStreamReader(file.getInputStream()))
                .withType(Nominee.class).build().parse();
        return nomineeService.saveAllNominees(nominees);
    }

    @GetMapping
    public List<Nominee> getAllNominees() {
        return nomineeService.getAllNominees();
    }
}
```

#### 2.5 Update `application.properties`

```properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
```

### Step 3: Set Up the Frontend

#### 3.1 Create a Basic HTML Page (src/main/resources/static/index.html)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>GHCP Onboarding</title>
</head>
<body>
    <h1>GHCP Onboarding</h1>
    <div>
        <button onclick="location.href='/approve'">Approve Self Desk Request</button>
        <button onclick="location.href='/upload'">Upload Approved Bulk Nominated CSV File</button>
    </div>

    <div id="uploadSection" style="display:none;">
        <h2>Upload CSV File</h2>
        <form action="/api/nominees/upload" method="post" enctype="multipart/form-data">
            <input type="file" name="file" accept=".csv" required>
            <button type="submit">Upload</button>
        </form>
    </div>

    <script>
        const url = window.location.pathname;
        if (url === '/upload') {
            document.getElementById('uploadSection').style.display = 'block';
        }
    </script>
</body>
</html>
```

#### 3.2 Create Controller for View Rendering

```java
package com.example.ghcponboarding.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class ViewController {

    @GetMapping("/")
    public String home() {
        return "index";
    }

    @GetMapping("/approve")
    public String approve() {
        // Logic for approving self desk request can be implemented here
        return "index";  // Redirecting back to home for now
    }

    @GetMapping("/upload")
    public String upload() {
        return "index";
    }
}
```

### Step 4: Add CSV Parsing Dependency

Add the following dependency to your `pom.xml` for CSV parsing:

```xml
<dependency>
    <groupId>com.opencsv</groupId>
    <artifactId>opencsv</artifactId>
    <version>5.5.2</version>
</dependency>
```

### Step 5: Run the Application

- Run the application from IntelliJ by executing the `GHCPOnboardingApplication` class.
- Open your browser and navigate to `http://localhost:8080`.

This setup provides a basic structure for your project. You can extend the functionality by adding more features, refining the UI, and enhancing error handling as needed.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>GHCP Onboarding</title>
</head>
<body>
    <h1>GHCP Onboarding</h1>
    <div>
        <button onclick="location.href='/approve'">Approve Self Desk Request</button>
        <button onclick="showUploadSection()">Upload Approved Bulk Nominated CSV File</button>
    </div>

    <div id="uploadSection" style="display:none;">
        <h2>Upload CSV File</h2>
        <input type="file" id="fileInput" accept=".csv" required>
        <button onclick="uploadFile()">Upload</button>
    </div>

    <script>
        function showUploadSection() {
            document.getElementById('uploadSection').style.display = 'block';
        }

        async function uploadFile() {
            const fileInput = document.getElementById('fileInput');
            const file = fileInput.files[0];

            if (!file) {
                alert('Please select a file to upload');
                return;
            }

            const formData = new FormData();
            formData.append('file', file);

            try {
                const response = await fetch('/api/nominees/upload', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const result = await response.json();
                    alert('File uploaded successfully');
                    console.log(result);
                } else {
                    alert('File upload failed');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while uploading the file');
            }
        }
    </script>
</body>
</html>
