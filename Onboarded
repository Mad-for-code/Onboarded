
Here's an example of how you can achieve this using HTML, JavaScript (to fetch the JSON and handle the checkboxes), and a bit of CSS for styling. This example includes a simple table that displays data fetched from a JSON endpoint, adds checkboxes to each row, and sends the details of checked rows via a POST request when submitted.

### HTML:
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSON Table with Checkboxes</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>

<h2>Data Table</h2>
<div id="table-container"></div>
<button onclick="submitCheckedRows()">Submit</button>

<script>
    async function fetchData() {
        const response = await fetch('your-json-endpoint-url');
        const data = await response.json();
        generateTable(data);
    }

    function generateTable(data) {
        const tableContainer = document.getElementById('table-container');
        let tableHTML = '<table><thead><tr><th>Select</th>';

        // Create table headers
        Object.keys(data[0]).forEach(key => {
            tableHTML += `<th>${key}</th>`;
        });
        tableHTML += '</tr></thead><tbody>';

        // Create table rows
        data.forEach((row, index) => {
            tableHTML += `<tr><td><input type="checkbox" class="row-checkbox" data-index="${index}"></td>`;
            Object.values(row).forEach(value => {
                tableHTML += `<td>${value}</td>`;
            });
            tableHTML += '</tr>';
        });
        tableHTML += '</tbody></table>';

        tableContainer.innerHTML = tableHTML;
    }

    async function submitCheckedRows() {
        const checkedBoxes = document.querySelectorAll('.row-checkbox:checked');
        const selectedData = [];

        checkedBoxes.forEach(box => {
            const rowIndex = box.dataset.index;
            const row = document.querySelectorAll('tbody tr')[rowIndex];
            const rowData = {};
            row.querySelectorAll('td:not(:first-child)').forEach((cell, i) => {
                rowData[document.querySelectorAll('th')[i+1].innerText] = cell.innerText;
            });
            selectedData.push(rowData);
        });

        const response = await fetch('your-post-endpoint-url', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(selectedData),
        });

        if (response.ok) {
            alert('Data submitted successfully!');
        } else {
            alert('Failed to submit data.');
        }
    }

    // Fetch data and generate table on page load
    window.onload = fetchData;
</script>

</body>
</html>
```

### Explanation:
1. **HTML Structure:**
   - A `div` with the id `table-container` to hold the generated table.
   - A `button` to trigger the submission of checked rows.

2. **CSS:**
   - Basic styles for the table to make it more readable.

3. **JavaScript:**
   - `fetchData`: Fetches JSON data from the specified endpoint and calls `generateTable` to create the table.
   - `generateTable`: Dynamically creates the table with checkboxes in the first column and populates it with data.
   - `submitCheckedRows`: Collects data from the checked rows and sends it via a POST request to the specified endpoint.

Make sure to replace `'your-json-endpoint-url'` with the actual URL where your JSON data is available and `'your-post-endpoint-url'` with the endpoint where you want to send the selected data. 
